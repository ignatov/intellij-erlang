plugins {
  id 'org.jetbrains.intellij' version "1.13.3"
}

dependencies {
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.6.1'
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.3'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.3'
  testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.6.3'
  testCompileOnly 'junit:junit:4.13.1'
}

version = "${version}.$buildNumber"
allprojects {
  repositories { mavenCentral() }
  apply plugin: 'java'
  sourceCompatibility = javaVersion
  targetCompatibility = javaTargetVersion
  tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

  sourceSets {
    main {
      java.srcDirs 'src', 'gen'
      resources.srcDirs 'resources', 'plugin/resources'
    }
    test {
      java.srcDir 'tests'
    }
  }

  apply plugin: 'org.jetbrains.intellij'
  intellij {
    version = ideaVersion
    plugins = ['copyright', 'java']
    downloadSources = Boolean.valueOf(sources)
    sameSinceUntilBuild = Boolean.valueOf(isEAP)
  }
  
  def compilationPackages = ['org/intellij/erlang/build/**', 'org/intellij/erlang/jps/**']
  
  test {
    useJUnitPlatform {
      exclude compilationPackages
    }
    testLogging {
      exceptionFormat = 'full'
    }
  }

  task testCompilation(type: Test, group: 'Verification', dependsOn: [classes, testClasses]) {
    useJUnit {
      include compilationPackages
    }
    testLogging {
      exceptionFormat = 'full'
    }
    systemProperties = [
      "erlang.sdk.path": System.getProperty("erlang.sdk.path")
    ]
  }
}

repositories {
  jcenter()
  flatDir {
    dirs 'libs'
  }
}

dependencies {
  implementation name: 'OtpErlang'
  implementation project('jps-plugin')
}

apply plugin: 'idea'
idea {
  project {
    jdkName = javaVersion
    languageLevel = javaVersion
  }
  module {
    generatedSourceDirs += file('gen')
  }
}
