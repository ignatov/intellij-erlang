import org.jetbrains.intellij.platform.gradle.TestFrameworkType
import org.jetbrains.intellij.platform.gradle.extensions.IntelliJPlatformDependenciesExtension

plugins {
  id 'org.jetbrains.intellij.platform' version "2.5.0"
}

apply plugin: 'org.jetbrains.intellij.platform'

subprojects {
  apply plugin: 'org.jetbrains.intellij.platform.module'
}


allprojects {
  repositories { mavenCentral() }

  dependencies {
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.6.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.3'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.6.3'
    testCompileOnly 'junit:junit:4.13.1'
  }

  apply plugin: 'java'
  
  // Only apply the main Java version if this is not the JPS module
  // JPS module defines its own Java compatibility version (11)
  if (project.name != 'jps-plugin') {
    sourceCompatibility = javaVersion
    targetCompatibility = javaTargetVersion
  }
  
  tasks.withType(JavaCompile).configureEach { 
    options.encoding = 'UTF-8' 
  }

  sourceSets {
    main {
      java.srcDirs 'src', 'gen'
      resources.srcDirs 'resources', 'plugin/resources'
    }
    test {
      java.srcDir 'tests'
    }
  }

  intellijPlatform {
    version = "${version}.$buildNumber"
//    plugins = ['copyright', 'java']
//    downloadSources = Boolean.valueOf(sources)
//    sameSinceUntilBuild = Boolean.valueOf(isEAP)
  }

  composedJar {
    archiveVersion = ""
  }

  repositories {
    intellijPlatform {
      defaultRepositories()
    }
  }

  dependencies {
    intellijPlatform { IntelliJPlatformDependenciesExtension ijp ->
      // https://data.services.jetbrains.com/products?code=IC
      ijp.intellijIdeaCommunity("251.23774.318")
      ijp.bundledPlugins("com.intellij.copyright", "com.intellij.java")
      ijp.instrumentationTools()
      ijp.testFramework(TestFrameworkType.Platform.INSTANCE)
      ijp.testFramework(TestFrameworkType.Plugin.Java.INSTANCE)
    }
  }
  
  def compilationPackages = ['org/intellij/erlang/build/**', 'org/intellij/erlang/jps/**']

  tasks.withType(Test).configureEach {
    jvmArgs = [
      '-Djava.awt.headless=true'
    ]
  }

  test {
    useJUnitPlatform {
      exclude compilationPackages
    }
    testLogging {
      exceptionFormat = 'full'
    }
  }

  task testCompilation(type: Test, group: 'Verification', dependsOn: [classes, testClasses]) {
    useJUnit {
      include compilationPackages
    }
    testLogging {
      exceptionFormat = 'full'
    }
    systemProperties = [
      "erlang.sdk.path": System.getProperty("erlang.sdk.path")
    ]
  }
}

repositories {
  flatDir {
    dirs 'libs'
  }
}

dependencies {
  implementation name: 'OtpErlang'
  implementation project('jps-plugin')
}

// Add JPS Java 11 verification to the plugin build pipeline
afterEvaluate {
  tasks.named('prepareSandbox') {
    dependsOn ':jps-plugin:verifyJpsJava11Compatibility'
  }
  
  tasks.named('buildPlugin') {
    dependsOn ':jps-plugin:verifyJpsJava11Compatibility'
  }
  
  tasks.named('check') {
    dependsOn ':jps-plugin:verifyJpsJava11Compatibility'
  }
}

apply plugin: 'idea'
idea {
  project {
    jdkName = javaVersion
    languageLevel = javaVersion
  }
  module {
    generatedSourceDirs += file('gen')
  }
}
