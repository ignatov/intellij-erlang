jar.archiveFileName = "jps-plugin.jar"

// Override the Java version for the JPS plugin to ensure compatibility with older IDEs
// This addresses issues #957, #976, #1022, #1054
sourceCompatibility = 11
targetCompatibility = 11

tasks.withType(JavaCompile).configureEach {
    options.release = 11
    options.compilerArgs += [
        '-Xlint:deprecation',
        '-Xlint:unchecked'
    ]
}

// Add a specific task to verify Java compatibility
task verifyJavaCompatibility {
    group = 'verification'
    description = 'Verifies the JPS plugin is compatible with Java 11'
    
    doLast {
        if (JavaVersion.current().isJava11Compatible()) {
            logger.lifecycle('Java version is compatible with Java 11')
        } else {
            throw new GradleException('Current Java version is not compatible with Java 11. Please use Java 11 or higher.')
        }
    }
}

// Ensure compatibility check runs before compilation
compileJava.dependsOn verifyJavaCompatibility

// Make sure all build tasks know this module needs Java 11 compatibility
project.ext.requiresJava11Compatibility = true

// Utility function to verify Java 11 compatibility of class files
def verifyJava11Compatibility(FileCollection classFiles, String context) {
    if (classFiles.empty) {
        throw new GradleException("No class files found in ${context}")
    }
    
    // List to track non-compliant files
    def nonCompliantFiles = []
    
    // Java 11's major class file version is 55
    def maxAllowedVersion = 55
    
    // Check each class file
    classFiles.each { file ->
        def byteCode = file.bytes
        
        // Class file format: 
        // - First 4 bytes: magic number (0xCAFEBABE)
        // - Next 4 bytes: version (minor 2 bytes, major 2 bytes)
        if (byteCode.length >= 8) {
            // Check magic number
            if (byteCode[0] == (byte)0xCA && 
                byteCode[1] == (byte)0xFE && 
                byteCode[2] == (byte)0xBA && 
                byteCode[3] == (byte)0xBE) {
                
                // Get major version (Java 11 = 55, Java 17 = 61)
                int majorVersion = ((byteCode[6] & 0xFF) << 8) | (byteCode[7] & 0xFF)
                
                if (majorVersion > maxAllowedVersion) {
                    nonCompliantFiles.add([
                        file: file.path, 
                        version: majorVersion,
                        javaVersion: getJavaVersionFromClassVersion(majorVersion)
                    ])
                }
            }
        }
    }
    
    // Report results
    if (!nonCompliantFiles.empty) {
        logger.error("Found ${nonCompliantFiles.size()} class files not compatible with Java 11 in ${context}:")
        nonCompliantFiles.each { info ->
            logger.error(" - ${info.file}: class file version ${info.version} (Java ${info.javaVersion}, should be <= 55/Java 11)")
        }
        throw new GradleException("JPS module contains class files not compatible with Java 11")
    } else {
        logger.lifecycle("All ${classFiles.size()} class files are compatible with Java 11 in ${context}")
    }
    
    return true
}

// Helper to map class file version to Java version
def getJavaVersionFromClassVersion(int majorVersion) {
    def versionMap = [
        45: 1.1,
        46: 1.2,
        47: 1.3,
        48: 1.4,
        49: 5,
        50: 6,
        51: 7,
        52: 8,
        53: 9,
        54: 10,
        55: 11,
        56: 12,
        57: 13,
        58: 14,
        59: 15,
        60: 16,
        61: 17,
        62: 18,
        63: 19,
        64: 20,
        65: 21
    ]
    
    return versionMap.getOrDefault(majorVersion, "unknown (version ${majorVersion})")
}

// Task to verify that the compiled class files are Java 11 compatible
task verifyJpsClassFilesJava11Compatible {
    group = 'verification'
    description = 'Verifies that JPS classes are compiled with Java 11 compatibility'
    
    // Make this task run after the classes have been compiled
    dependsOn classes
    
    doLast {
        def classesDir = new File("${buildDir}/classes/java/main")
        if (!classesDir.exists()) {
            logger.warn("Classes directory not found: ${classesDir}. This is normal if you haven't compiled the project yet.")
            logger.lifecycle("Skipping JPS class verification since directory doesn't exist yet. Will be verified during compilation.")
            return
        }
        
        // Find all class files recursively
        def classFiles = fileTree(classesDir).include('**/*.class')
        
        if (classFiles.empty) {
            logger.warn("No class files found in ${classesDir}. This is normal if you haven't compiled Java files yet.")
            logger.lifecycle("Skipping JPS class verification since no class files exist yet. Will be verified during compilation.")
            return
        }
        
        verifyJava11Compatibility(classFiles, "compiled classes")
    }
}

// Run the verification as part of the check task
check.dependsOn verifyJpsClassFilesJava11Compatible

// Verify the jar file after it's been created
task verifyJpsJarJava11Compatible {
    group = 'verification'
    description = 'Verifies that JPS jar file contains only Java 11 compatible classes'
    
    // This task should run after the jar task
    dependsOn jar
    
    doLast {
        def jarFile = file("${buildDir}/libs/jps-plugin.jar")
        if (!jarFile.exists()) {
            logger.warn("JAR file not found: ${jarFile}. This is normal if you haven't built the JAR yet.")
            logger.lifecycle("Skipping JPS JAR verification since the file doesn't exist yet. Will be verified during the JAR build.")
            return
        }
        
        // Create a temporary directory to extract the jar
        def tempDir = file("${buildDir}/tmp/verifyJar")
        tempDir.deleteDir()
        tempDir.mkdirs()
        
        // Extract jar file
        copy {
            from zipTree(jarFile)
            into tempDir
        }
        
        try {
            // Find all class files in the extracted jar
            def classFiles = fileTree(tempDir).include('**/*.class')
            verifyJava11Compatibility(classFiles, "JAR file")
        } finally {
            // Clean up
            tempDir.deleteDir()
        }
    }
}

// Also run this verification as part of the check task
check.dependsOn verifyJpsJarJava11Compatible

// Create a convenient task that runs all verifications
task verifyJpsJava11Compatibility {
    group = 'verification'
    description = 'Runs all Java 11 compatibility checks for JPS module'
    
    dependsOn verifyJavaCompatibility
    dependsOn verifyJpsClassFilesJava11Compatible
    dependsOn verifyJpsJarJava11Compatible
}