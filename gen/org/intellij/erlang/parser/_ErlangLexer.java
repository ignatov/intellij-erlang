/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.intellij.erlang.parser;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static org.intellij.erlang.ErlangTypes.*;
import static org.intellij.erlang.ErlangParserDefinition.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Erlang.flex</tt>
 */
public class _ErlangLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_QUOTES = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15264 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43"+
    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1"+
    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277"+
    "\12");

  /* The ZZ_CMAP_Y table has 3328 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11\1\12\1\13\1\14\1\13\1\14\34\13"+
    "\1\15\1\16\1\17\1\10\7\13\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\22\12\13\1"+
    "\24\1\13\1\25\1\24\1\13\1\26\1\24\1\13\1\27\1\30\1\13\1\31\1\32\1\10\1\31"+
    "\4\13\1\33\6\13\1\34\1\35\1\36\1\10\3\13\1\37\6\13\1\16\3\13\1\40\2\13\1\41"+
    "\1\10\1\13\1\42\4\10\1\13\1\43\1\10\1\44\1\22\7\13\1\45\1\24\1\34\1\46\1\35"+
    "\1\47\1\50\1\51\1\45\1\16\1\52\1\46\1\35\1\53\1\54\1\55\1\56\1\57\1\60\1\22"+
    "\1\35\1\61\1\62\1\63\1\45\1\64\1\65\1\46\1\35\1\61\1\66\1\67\1\45\1\70\1\71"+
    "\1\72\1\73\1\33\1\74\1\75\1\56\1\10\1\76\1\77\1\35\1\100\1\101\1\102\1\45"+
    "\1\10\1\76\1\77\1\35\1\103\1\101\1\104\1\45\1\105\1\106\1\77\1\13\1\37\1\107"+
    "\1\110\1\45\1\111\1\112\1\113\1\13\1\114\1\115\1\116\1\56\1\117\1\24\2\13"+
    "\1\31\1\120\1\121\2\10\1\122\1\123\1\124\1\125\1\126\1\127\2\10\1\63\1\130"+
    "\1\121\1\131\1\132\1\13\1\133\1\24\1\134\1\132\1\13\1\133\1\135\3\10\4\13"+
    "\1\121\4\13\1\41\2\13\1\136\2\13\1\137\24\13\1\140\1\141\2\13\1\140\2\13\1"+
    "\142\1\143\1\14\3\13\1\143\3\13\1\37\2\10\1\13\1\10\5\13\1\144\1\24\45\13"+
    "\1\36\1\13\1\24\1\31\4\13\1\145\1\146\1\147\1\150\1\13\1\150\1\13\1\151\1"+
    "\147\1\152\5\13\1\153\1\121\1\10\1\154\1\121\5\13\1\26\2\13\1\31\4\13\1\57"+
    "\1\13\1\120\2\42\1\56\1\13\1\41\1\150\2\13\1\42\1\13\2\121\2\10\1\13\1\42"+
    "\3\13\1\120\1\13\1\36\2\121\1\155\1\120\4\10\4\13\1\42\1\121\1\156\1\151\7"+
    "\13\1\151\3\13\1\26\1\100\2\13\1\41\1\146\4\10\1\157\1\13\1\160\17\13\1\161"+
    "\21\13\1\144\2\13\1\144\1\162\1\13\1\41\3\13\1\163\1\164\1\165\1\133\1\164"+
    "\3\10\1\166\1\63\1\167\1\10\1\170\1\10\1\133\3\10\2\13\1\63\1\171\1\172\1"+
    "\173\1\127\1\174\1\10\2\13\1\146\62\10\1\56\2\13\1\121\161\10\2\13\1\120\2"+
    "\13\1\120\10\13\1\175\1\151\2\13\1\136\3\13\1\176\1\166\1\13\1\177\4\200\2"+
    "\13\2\10\1\166\35\10\1\201\1\10\1\24\1\202\1\24\4\13\1\203\1\24\4\13\1\137"+
    "\1\204\1\13\1\41\1\24\4\13\1\120\1\10\1\13\1\31\3\10\1\13\40\10\133\13\1\57"+
    "\4\10\135\13\1\57\2\10\10\13\1\133\4\10\2\13\1\41\20\13\1\133\1\13\1\42\1"+
    "\10\3\13\1\205\7\13\1\16\1\10\1\206\1\207\5\13\1\210\1\13\1\120\1\26\3\10"+
    "\1\206\2\13\1\26\1\10\3\13\1\151\4\13\1\57\1\121\1\13\1\211\2\13\1\41\2\13"+
    "\1\151\1\13\1\133\4\13\1\212\1\121\1\13\1\120\3\13\1\177\1\41\1\121\1\13\1"+
    "\113\4\13\1\32\1\154\1\13\1\213\1\214\1\215\1\200\2\13\1\137\1\57\7\13\1\216"+
    "\1\121\72\13\1\151\1\13\1\217\2\13\1\42\20\10\26\13\1\41\6\13\1\121\2\10\1"+
    "\177\1\220\1\35\1\221\1\222\6\13\1\16\1\10\1\223\25\13\1\41\1\10\4\13\1\207"+
    "\2\13\1\26\2\10\1\42\1\13\1\10\1\13\1\224\1\225\2\10\1\134\7\13\1\133\1\10"+
    "\1\121\1\24\1\226\1\24\1\31\1\56\4\13\1\120\1\227\1\230\2\10\1\231\1\13\1"+
    "\14\1\232\2\41\2\10\7\13\1\31\4\10\3\13\1\150\7\10\1\233\10\10\1\13\1\133"+
    "\3\13\2\63\1\10\2\13\1\10\1\13\1\31\2\13\1\31\1\13\1\41\2\13\1\234\1\235\2"+
    "\10\11\13\1\41\1\121\2\13\1\234\1\13\1\42\2\13\1\26\3\13\1\151\11\10\23\13"+
    "\1\177\1\13\1\57\1\26\11\10\1\236\2\13\1\237\1\13\1\57\1\13\1\177\1\13\1\120"+
    "\4\10\1\13\1\240\1\13\1\57\1\13\1\121\4\10\3\13\1\241\4\10\1\242\1\243\1\13"+
    "\1\244\2\10\1\13\1\133\1\13\1\133\2\10\1\132\1\13\1\177\1\10\3\13\1\57\1\13"+
    "\1\57\1\13\1\32\1\13\1\16\6\10\4\13\1\146\3\10\3\13\1\32\3\13\1\32\60\10\4"+
    "\13\1\177\1\10\1\56\1\166\3\13\1\31\1\10\1\13\1\146\1\121\3\13\1\134\1\10"+
    "\2\13\1\245\4\13\1\246\1\247\2\10\1\13\1\22\1\13\1\250\4\10\1\251\1\27\1\146"+
    "\3\13\1\31\1\121\1\34\1\46\1\35\1\61\1\66\1\252\1\253\1\150\10\10\4\13\1\31"+
    "\1\121\2\10\4\13\1\254\1\121\12\10\3\13\1\255\1\63\1\256\2\10\4\13\1\257\1"+
    "\121\2\10\3\13\1\26\1\121\3\10\1\13\1\100\1\42\1\121\26\10\4\13\1\121\1\166"+
    "\34\10\3\13\1\146\20\10\1\35\2\13\1\14\1\63\1\121\1\10\1\207\1\13\1\207\1"+
    "\132\1\177\64\10\71\13\1\121\6\10\6\13\1\120\1\10\14\13\1\151\53\10\2\13\1"+
    "\120\75\10\44\13\1\177\33\10\43\13\1\146\1\13\1\120\1\121\6\10\1\13\1\41\1"+
    "\150\3\13\1\177\1\151\1\121\1\223\1\260\1\13\67\10\4\13\1\150\2\13\1\120\1"+
    "\166\1\13\4\10\1\63\1\10\76\13\1\133\1\10\57\13\1\32\20\10\1\16\77\10\6\13"+
    "\1\31\1\133\1\146\1\261\114\10\1\262\1\263\1\264\1\10\1\265\11\10\1\266\33"+
    "\10\5\13\1\134\3\13\1\147\1\267\1\270\1\271\3\13\1\272\1\273\1\13\1\274\1"+
    "\275\1\77\24\13\1\255\1\13\1\77\1\137\1\13\1\137\1\13\1\134\1\13\1\134\1\120"+
    "\1\13\1\120\1\13\1\35\1\13\1\35\1\13\1\276\3\13\40\10\3\13\1\217\2\13\1\133"+
    "\1\277\1\167\1\156\1\24\25\10\1\14\1\210\1\300\75\10\14\13\1\150\1\177\2\10"+
    "\4\13\1\31\1\121\112\10\1\271\1\13\1\301\1\302\1\303\1\304\1\305\1\306\1\307"+
    "\1\42\1\310\1\42\47\10\1\13\1\121\1\13\1\121\1\13\1\121\47\10\55\13\1\177"+
    "\2\10\103\13\1\150\15\13\1\41\150\13\1\16\25\10\41\13\1\41\56\10\17\13\41"+
    "\10");

  /* The ZZ_CMAP_A table has 3216 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\1\1\10\0\1\1\1\6\2\0\1\4\21\0\2\1\1\3\1\22\1\2\1\41\1\5\1\0\1\33\1\55\1\72"+
    "\1\66\1\65\1\43\1\14\1\15\1\67\10\17\2\11\1\62\1\74\1\64\1\42\1\63\1\71\1"+
    "\20\4\7\1\12\25\7\1\34\1\16\1\36\1\21\1\44\1\40\1\45\1\23\1\53\1\24\1\13\1"+
    "\25\1\50\1\47\1\51\2\10\1\61\1\60\1\26\1\52\2\10\1\27\1\30\1\31\1\54\1\32"+
    "\1\46\1\70\1\57\1\10\1\35\1\73\1\37\22\0\1\1\11\0\1\56\12\0\1\56\4\0\1\56"+
    "\5\0\27\56\1\0\12\56\4\0\14\56\16\0\5\56\7\0\1\56\1\0\1\56\1\0\5\56\1\0\2"+
    "\56\2\0\4\56\1\0\1\56\6\0\1\56\1\0\3\56\1\0\1\56\1\0\4\56\1\0\23\56\1\0\11"+
    "\56\1\0\26\56\2\0\1\56\6\0\10\56\10\0\16\56\1\0\1\56\1\0\2\56\1\0\2\56\1\0"+
    "\1\56\10\0\13\56\5\0\3\56\15\0\12\56\4\0\6\56\1\0\10\56\2\0\12\56\1\0\23\56"+
    "\2\0\14\56\2\0\11\56\4\0\1\56\5\0\16\56\2\0\14\56\4\0\5\56\1\0\10\56\6\0\20"+
    "\56\2\0\13\56\2\0\16\56\1\0\1\56\3\0\4\56\2\0\11\56\2\0\2\56\2\0\4\56\10\0"+
    "\1\56\4\0\2\56\1\0\1\56\1\0\3\56\1\0\6\56\4\0\2\56\1\0\2\56\1\0\2\56\1\0\2"+
    "\56\2\0\1\56\1\0\5\56\4\0\2\56\2\0\3\56\3\0\1\56\7\0\4\56\1\0\1\56\7\0\20"+
    "\56\13\0\3\56\1\0\11\56\1\0\2\56\1\0\2\56\1\0\5\56\2\0\12\56\1\0\3\56\1\0"+
    "\3\56\2\0\1\56\30\0\1\56\7\0\3\56\1\0\10\56\2\0\6\56\2\0\2\56\2\0\3\56\10"+
    "\0\2\56\4\0\2\56\1\0\1\56\1\0\1\56\20\0\2\56\1\0\6\56\3\0\3\56\1\0\4\56\3"+
    "\0\2\56\1\0\1\56\1\0\2\56\3\0\2\56\3\0\3\56\3\0\5\56\3\0\3\56\1\0\4\56\2\0"+
    "\1\56\6\0\1\56\10\0\4\56\1\0\10\56\1\0\3\56\1\0\30\56\3\0\10\56\1\0\3\56\1"+
    "\0\4\56\7\0\2\56\1\0\3\56\5\0\4\56\1\0\5\56\2\0\4\56\5\0\2\56\7\0\1\56\2\0"+
    "\2\56\16\0\3\56\1\0\10\56\1\0\7\56\1\0\3\56\1\0\5\56\5\0\4\56\7\0\1\56\12"+
    "\0\6\56\2\0\2\56\1\0\22\56\3\0\10\56\1\0\11\56\1\0\1\56\2\0\7\56\3\0\1\56"+
    "\4\0\6\56\1\0\1\56\1\0\10\56\2\0\2\56\14\0\17\56\1\0\12\56\7\0\2\56\1\0\1"+
    "\56\2\0\2\56\1\0\1\56\2\0\1\56\6\0\4\56\1\0\7\56\1\0\3\56\1\0\1\56\1\0\1\56"+
    "\2\0\2\56\1\0\15\56\1\0\3\56\2\0\5\56\1\0\1\56\1\0\6\56\2\0\12\56\2\0\4\56"+
    "\10\0\2\56\13\0\1\56\1\0\1\56\1\0\1\56\4\0\12\56\1\0\24\56\3\0\5\56\1\0\12"+
    "\56\6\0\1\56\11\0\6\56\1\0\1\56\5\0\1\56\2\0\13\56\1\0\15\56\1\0\4\56\2\0"+
    "\7\56\1\0\1\56\1\0\4\56\2\0\1\56\1\0\4\56\2\0\7\56\1\0\1\56\1\0\4\56\2\0\16"+
    "\56\2\0\6\56\2\0\13\56\3\0\13\56\7\0\15\56\1\0\7\56\13\0\4\56\14\0\1\56\1"+
    "\0\2\56\14\0\4\56\3\0\1\56\4\0\2\56\15\0\3\56\11\0\1\56\23\0\10\56\1\0\23"+
    "\56\1\0\2\56\6\0\6\56\5\0\15\56\1\0\1\56\1\0\1\56\1\0\1\56\1\0\6\56\1\0\7"+
    "\56\1\0\1\56\3\0\3\56\1\0\7\56\3\0\4\56\2\0\6\56\23\0\1\56\4\0\1\56\14\0\1"+
    "\56\15\0\1\56\2\0\1\56\4\0\1\56\2\0\12\56\1\0\1\56\3\0\5\56\6\0\1\56\1\0\1"+
    "\56\1\0\1\56\1\0\4\56\1\0\1\56\5\0\5\56\4\0\1\56\1\0\5\56\6\0\15\56\7\0\10"+
    "\56\11\0\7\56\1\0\7\56\6\0\3\56\11\0\5\56\2\0\5\56\3\0\7\56\2\0\2\56\2\0\3"+
    "\56\5\0\16\56\1\0\12\56\1\0\1\56\7\0\11\56\2\0\27\56\2\0\15\56\3\0\1\56\1"+
    "\0\1\56\2\0\1\56\16\0\1\56\2\0\5\56\12\0\6\56\2\0\6\56\2\0\6\56\11\0\13\56"+
    "\1\0\2\56\2\0\7\56\4\0\5\56\3\0\5\56\5\0\12\56\1\0\5\56\1\0\1\56\1\0\2\56"+
    "\1\0\2\56\1\0\12\56\3\0\15\56\3\0\2\56\30\0\16\56\4\0\1\56\2\0\6\56\2\0\6"+
    "\56\2\0\6\56\2\0\3\56\3\0\14\56\1\0\16\56\1\0\2\56\1\0\1\56\15\0\1\56\2\0"+
    "\4\56\4\0\10\56\1\0\5\56\12\0\6\56\2\0\1\56\1\0\14\56\1\0\2\56\3\0\1\56\2"+
    "\0\4\56\1\0\2\56\12\0\10\56\6\0\6\56\1\0\2\56\5\0\10\56\1\0\3\56\1\0\13\56"+
    "\4\0\3\56\4\0\5\56\2\0\1\56\11\0\5\56\5\0\3\56\3\0\13\56\1\0\1\56\3\0\10\56"+
    "\6\0\1\56\1\0\7\56\1\0\1\56\1\0\4\56\1\0\2\56\6\0\1\56\5\0\7\56\2\0\7\56\3"+
    "\0\6\56\1\0\1\56\10\0\6\56\2\0\10\56\10\0\6\56\2\0\1\56\3\0\1\56\13\0\10\56"+
    "\5\0\15\56\3\0\2\56\6\0\5\56\3\0\6\56\10\0\10\56\2\0\7\56\16\0\4\56\4\0\3"+
    "\56\15\0\1\56\2\0\2\56\2\0\4\56\1\0\14\56\1\0\1\56\1\0\7\56\1\0\21\56\1\0"+
    "\4\56\2\0\10\56\1\0\7\56\1\0\14\56\1\0\4\56\1\0\5\56\1\0\1\56\3\0\11\56\1"+
    "\0\10\56\2\0\2\56\5\0\1\56\12\0\2\56\1\0\2\56\1\0\5\56\6\0\2\56\1\0\1\56\2"+
    "\0\1\56\1\0\12\56\1\0\4\56\1\0\1\56\1\0\1\56\6\0\1\56\4\0\1\56\1\0\1\56\1"+
    "\0\1\56\1\0\3\56\1\0\2\56\1\0\1\56\2\0\1\56\1\0\1\56\1\0\1\56\1\0\1\56\1\0"+
    "\1\56\1\0\2\56\1\0\1\56\2\0\4\56\1\0\7\56\1\0\4\56\1\0\4\56\1\0\1\56\1\0\12"+
    "\56\1\0\5\56\1\0\3\56\1\0\5\56\1\0\5\56");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\7\1\11\1\12\1\1\6\7\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\5\7\1\23"+
    "\1\7\1\24\1\25\1\26\1\27\1\30\1\31\1\7"+
    "\1\32\1\33\1\34\1\35\1\7\1\1\1\36\1\37"+
    "\1\5\1\40\1\0\1\10\1\0\2\7\1\41\1\42"+
    "\1\43\2\0\1\44\14\7\2\20\1\45\1\0\1\46"+
    "\1\47\1\0\3\7\1\50\1\51\1\52\2\7\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\7\1\64\1\65\2\0\1\40\1\66\2\10\1\67"+
    "\1\70\1\7\1\71\2\7\1\72\1\73\1\7\1\74"+
    "\1\7\1\75\1\7\1\76\1\7\1\77\1\100\1\20"+
    "\1\0\1\101\1\102\1\7\1\103\5\7\1\104\1\0"+
    "\1\105\1\7\1\106\1\107\1\110\1\0\1\111\1\112"+
    "\1\111\1\7\1\20\2\7\1\113\1\7\1\114\2\7"+
    "\1\67\1\0\1\115\1\7\1\116\2\7\1\117\1\120"+
    "\2\7\1\121\1\122\1\123";

  private static int [] zzUnpackAction() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\172\0\u0131\0\u016e"+
    "\0\u01ab\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356"+
    "\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\172\0\172\0\172"+
    "\0\172\0\u04c4\0\u0501\0\172\0\u053e\0\u057b\0\u05b8\0\u05f5"+
    "\0\u0632\0\172\0\u066f\0\u06ac\0\u06e9\0\u0726\0\u0763\0\172"+
    "\0\u07a0\0\u07dd\0\u081a\0\172\0\u0857\0\172\0\u0894\0\u08d1"+
    "\0\172\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c"+
    "\0\u0ab9\0\172\0\172\0\u0af6\0\u02dc\0\u0b33\0\172\0\u0b70"+
    "\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58"+
    "\0\u0d95\0\u0dd2\0\172\0\172\0\u0e0f\0\172\0\u0e4c\0\172"+
    "\0\172\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u01ab\0\u01ab\0\u0f7d"+
    "\0\u0fba\0\u0ff7\0\172\0\172\0\172\0\172\0\172\0\172"+
    "\0\172\0\172\0\172\0\u1034\0\172\0\172\0\u08d1\0\u1071"+
    "\0\u10ae\0\u10eb\0\u09c5\0\u1128\0\u1165\0\u01ab\0\u11a2\0\172"+
    "\0\u11df\0\u121c\0\u01ab\0\u01ab\0\u1259\0\u01ab\0\u1296\0\u01ab"+
    "\0\u12d3\0\u01ab\0\u1310\0\u01ab\0\u01ab\0\u134d\0\u138a\0\172"+
    "\0\172\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535"+
    "\0\u01ab\0\u1572\0\u01ab\0\u15af\0\u01ab\0\u01ab\0\u01ab\0\u15ec"+
    "\0\u01ab\0\172\0\172\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u01ab"+
    "\0\u171d\0\u01ab\0\u175a\0\u1797\0\u17d4\0\u17d4\0\u01ab\0\u1811"+
    "\0\u01ab\0\u184e\0\u188b\0\u01ab\0\u01ab\0\u18c8\0\u1905\0\u01ab"+
    "\0\u01ab\0\u01ab";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\3\1\7\1\4\1\10"+
    "\1\11\1\12\1\10\1\13\1\14\1\15\1\3\1\12"+
    "\2\3\1\16\1\17\1\20\1\21\1\22\1\23\1\11"+
    "\1\24\1\11\1\25\1\26\1\27\1\30\1\31\1\3"+
    "\1\32\1\33\1\34\1\10\1\35\1\36\2\11\1\37"+
    "\1\40\1\41\1\11\1\42\1\3\1\11\1\43\1\11"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\16\57\1\60\14\57\1\61\41\57"+
    "\76\0\1\4\4\0\1\4\71\0\1\62\71\0\4\63"+
    "\1\0\1\64\1\0\66\63\7\0\5\10\3\0\2\10"+
    "\2\0\10\10\11\0\11\10\2\0\3\10\6\0\1\10"+
    "\13\0\5\11\3\0\2\11\2\0\10\11\11\0\11\11"+
    "\2\0\3\11\6\0\1\11\6\0\1\65\6\0\1\66"+
    "\3\0\1\67\1\0\1\66\64\0\5\11\3\0\2\11"+
    "\2\0\3\11\1\70\4\11\11\0\11\11\2\0\2\11"+
    "\1\71\6\0\1\11\20\0\1\72\46\0\1\73\26\0"+
    "\1\74\57\0\16\75\1\76\3\75\1\77\52\75\7\0"+
    "\4\11\1\100\3\0\2\11\2\0\3\11\1\101\1\11"+
    "\1\102\2\11\11\0\1\11\1\103\4\11\1\104\2\11"+
    "\2\0\3\11\6\0\1\105\13\0\5\11\3\0\2\11"+
    "\2\0\10\11\11\0\5\11\1\106\3\11\2\0\3\11"+
    "\6\0\1\11\13\0\5\11\3\0\2\11\2\0\10\11"+
    "\11\0\10\11\1\107\2\0\3\11\6\0\1\11\13\0"+
    "\5\11\3\0\2\11\2\0\10\11\11\0\6\11\1\110"+
    "\2\11\2\0\3\11\6\0\1\11\13\0\4\11\1\111"+
    "\3\0\2\11\2\0\10\11\11\0\11\11\2\0\3\11"+
    "\6\0\1\11\13\0\5\11\3\0\2\11\2\0\4\11"+
    "\1\112\3\11\11\0\11\11\2\0\3\11\6\0\1\11"+
    "\37\0\1\113\41\0\6\114\1\0\7\114\1\115\56\114"+
    "\42\0\1\116\17\0\1\117\1\120\1\121\2\0\1\122"+
    "\14\0\5\11\3\0\2\11\2\0\2\11\1\123\1\124"+
    "\4\11\11\0\11\11\2\0\3\11\6\0\1\11\13\0"+
    "\5\11\3\0\2\11\2\0\10\11\11\0\3\11\1\125"+
    "\5\11\2\0\3\11\6\0\1\11\13\0\5\11\3\0"+
    "\2\11\2\0\2\11\1\126\5\11\11\0\11\11\2\0"+
    "\3\11\6\0\1\11\13\0\5\11\3\0\2\11\2\0"+
    "\2\11\1\127\1\11\1\130\3\11\11\0\11\11\2\0"+
    "\3\11\6\0\1\11\13\0\5\11\3\0\2\11\2\0"+
    "\10\11\11\0\1\11\1\131\7\11\2\0\3\11\6\0"+
    "\1\11\13\0\5\11\3\0\2\11\2\0\10\11\11\0"+
    "\1\11\1\132\7\11\2\0\3\11\6\0\1\11\46\0"+
    "\1\133\17\0\1\134\54\0\1\135\20\0\1\136\25\0"+
    "\1\137\25\0\1\140\21\0\1\141\75\0\1\142\51\0"+
    "\1\143\41\0\5\11\3\0\2\11\2\0\10\11\11\0"+
    "\6\11\1\144\2\11\2\0\3\11\6\0\1\11\46\0"+
    "\1\145\125\0\1\146\1\0\16\57\1\147\14\57\1\0"+
    "\41\57\5\0\1\57\5\0\1\57\1\0\3\57\1\0"+
    "\1\150\23\57\30\0\4\62\1\0\1\62\1\0\66\62"+
    "\4\63\1\0\1\63\1\0\66\63\4\151\1\0\1\152"+
    "\1\0\66\151\7\0\5\153\3\0\1\153\3\0\10\153"+
    "\12\0\10\153\2\0\3\153\6\0\1\153\6\0\1\65"+
    "\6\0\1\154\3\0\1\67\1\0\1\154\66\0\1\155"+
    "\5\0\1\155\64\0\5\11\3\0\2\11\2\0\1\11"+
    "\1\156\6\11\11\0\11\11\2\0\3\11\6\0\1\11"+
    "\13\0\5\11\3\0\2\11\2\0\5\11\1\157\2\11"+
    "\11\0\11\11\2\0\3\11\6\0\1\11\21\0\1\160"+
    "\57\0\75\75\7\0\5\11\3\0\2\11\2\0\10\11"+
    "\11\0\4\11\1\161\4\11\2\0\3\11\6\0\1\11"+
    "\13\0\5\11\3\0\2\11\2\0\10\11\11\0\6\11"+
    "\1\162\2\11\2\0\3\11\6\0\1\11\13\0\5\11"+
    "\3\0\2\11\2\0\4\11\1\163\3\11\11\0\11\11"+
    "\2\0\2\11\1\164\6\0\1\11\13\0\5\11\3\0"+
    "\2\11\2\0\3\11\1\165\4\11\11\0\11\11\2\0"+
    "\3\11\6\0\1\11\13\0\5\11\3\0\2\11\2\0"+
    "\4\11\1\166\3\11\11\0\11\11\2\0\3\11\6\0"+
    "\1\11\13\0\5\11\3\0\2\11\2\0\10\11\11\0"+
    "\6\11\1\167\2\11\2\0\3\11\6\0\1\11\13\0"+
    "\5\11\3\0\2\11\2\0\7\11\1\170\11\0\11\11"+
    "\2\0\3\11\6\0\1\11\13\0\5\11\3\0\2\11"+
    "\2\0\3\11\1\171\4\11\11\0\11\11\2\0\3\11"+
    "\6\0\1\11\13\0\5\11\3\0\2\11\2\0\6\11"+
    "\1\172\1\11\11\0\11\11\2\0\3\11\6\0\1\11"+
    "\13\0\5\11\3\0\2\11\2\0\10\11\11\0\7\11"+
    "\1\173\1\11\2\0\1\11\1\174\1\11\6\0\1\11"+
    "\13\0\5\11\3\0\2\11\2\0\10\11\11\0\11\11"+
    "\2\0\1\175\2\11\6\0\1\11\5\0\1\114\3\0"+
    "\2\114\4\0\1\114\1\0\2\114\1\176\1\0\1\177"+
    "\23\114\72\0\1\200\74\0\1\201\41\0\5\11\3\0"+
    "\2\11\2\0\6\11\1\202\1\11\11\0\11\11\2\0"+
    "\3\11\6\0\1\11\13\0\5\11\3\0\2\11\2\0"+
    "\1\11\1\203\6\11\11\0\11\11\2\0\3\11\6\0"+
    "\1\11\13\0\4\11\1\204\3\0\2\11\2\0\10\11"+
    "\11\0\11\11\2\0\3\11\6\0\1\11\13\0\4\11"+
    "\1\205\3\0\2\11\2\0\10\11\11\0\11\11\2\0"+
    "\3\11\6\0\1\11\13\0\5\11\3\0\2\11\2\0"+
    "\5\11\1\206\1\207\1\11\11\0\11\11\2\0\3\11"+
    "\6\0\1\11\13\0\5\11\3\0\2\11\2\0\10\11"+
    "\11\0\11\11\2\0\1\210\2\11\6\0\1\11\13\0"+
    "\5\11\3\0\2\11\2\0\4\11\1\211\3\11\11\0"+
    "\11\11\2\0\3\11\6\0\1\11\13\0\1\57\2\0"+
    "\1\57\3\0\1\57\1\0\2\57\12\0\1\57\1\0"+
    "\1\57\5\0\1\57\30\0\4\151\1\0\1\151\1\0"+
    "\66\151\4\152\1\0\1\152\1\0\66\152\11\0\1\154"+
    "\3\0\1\67\1\0\1\154\66\0\1\155\2\212\3\0"+
    "\1\155\64\0\4\11\1\213\3\0\2\11\2\0\10\11"+
    "\11\0\11\11\2\0\3\11\6\0\1\11\13\0\5\11"+
    "\3\0\2\11\2\0\10\11\11\0\5\11\1\214\3\11"+
    "\2\0\3\11\6\0\1\11\13\0\5\11\3\0\2\11"+
    "\2\0\6\11\1\215\1\11\11\0\11\11\2\0\3\11"+
    "\6\0\1\11\13\0\5\11\3\0\2\11\2\0\1\11"+
    "\1\216\6\11\11\0\11\11\2\0\3\11\6\0\1\11"+
    "\13\0\5\11\3\0\2\11\2\0\4\11\1\217\3\11"+
    "\11\0\11\11\2\0\3\11\6\0\1\11\5\0\1\220"+
    "\4\0\1\220\5\221\3\0\1\221\1\11\2\0\10\221"+
    "\11\0\11\221\1\222\1\223\3\221\6\0\1\221\13\0"+
    "\4\11\1\224\3\0\2\11\2\0\10\11\11\0\11\11"+
    "\2\0\3\11\6\0\1\11\23\0\1\225\64\0\1\114"+
    "\2\0\1\114\3\0\1\114\1\0\2\114\12\0\1\114"+
    "\1\0\1\114\5\0\1\114\37\0\4\11\1\226\3\0"+
    "\2\11\2\0\10\11\11\0\11\11\2\0\3\11\6\0"+
    "\1\11\13\0\5\11\3\0\2\11\2\0\10\11\11\0"+
    "\1\11\1\227\7\11\2\0\3\11\6\0\1\11\13\0"+
    "\5\11\3\0\2\11\2\0\3\11\1\230\4\11\11\0"+
    "\11\11\2\0\3\11\6\0\1\11\13\0\5\11\3\0"+
    "\2\11\2\0\10\11\11\0\11\11\2\0\2\11\1\231"+
    "\6\0\1\11\13\0\4\11\1\232\3\0\2\11\2\0"+
    "\10\11\11\0\11\11\2\0\3\11\6\0\1\11\13\0"+
    "\5\11\3\0\2\11\2\0\10\11\11\0\7\11\1\233"+
    "\1\11\2\0\3\11\6\0\1\11\13\0\5\11\3\0"+
    "\2\11\2\0\1\234\7\11\11\0\11\11\2\0\3\11"+
    "\6\0\1\11\15\0\1\235\2\0\1\236\2\0\1\235"+
    "\45\0\1\236\16\0\5\11\3\0\2\11\2\0\3\11"+
    "\1\237\4\11\11\0\11\11\2\0\3\11\6\0\1\11"+
    "\5\0\1\220\4\0\1\220\5\223\3\0\1\223\3\0"+
    "\10\223\11\0\11\223\1\222\4\223\6\0\1\223\13\0"+
    "\5\11\3\0\2\11\2\0\10\11\11\0\5\11\1\240"+
    "\3\11\2\0\3\11\6\0\1\11\23\0\1\114\64\0"+
    "\5\11\3\0\2\11\2\0\4\11\1\241\3\11\11\0"+
    "\11\11\2\0\3\11\6\0\1\11\13\0\5\11\3\0"+
    "\2\11\2\0\10\11\11\0\11\11\2\0\2\11\1\242"+
    "\6\0\1\11\13\0\5\11\3\0\2\11\2\0\5\11"+
    "\1\243\2\11\11\0\11\11\2\0\3\11\6\0\1\11"+
    "\13\0\5\11\3\0\2\11\2\0\10\11\11\0\3\11"+
    "\1\244\5\11\2\0\3\11\6\0\1\11\13\0\4\11"+
    "\1\245\3\0\2\11\2\0\10\11\11\0\11\11\2\0"+
    "\3\11\6\0\1\11\15\0\1\235\5\0\1\235\64\0"+
    "\5\11\3\0\2\11\2\0\7\11\1\246\11\0\11\11"+
    "\2\0\3\11\6\0\1\11\13\0\5\11\3\0\2\11"+
    "\2\0\5\11\1\247\2\11\11\0\11\11\2\0\3\11"+
    "\6\0\1\11\13\0\4\11\1\250\3\0\2\11\2\0"+
    "\10\11\11\0\11\11\2\0\3\11\6\0\1\11\13\0"+
    "\4\11\1\251\3\0\2\11\2\0\10\11\11\0\11\11"+
    "\2\0\3\11\6\0\1\11\13\0\5\11\3\0\2\11"+
    "\2\0\10\11\11\0\6\11\1\252\2\11\2\0\3\11"+
    "\6\0\1\11\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6466];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\1\11\17\1\4\11\2\1\1\11"+
    "\5\1\1\11\5\1\1\11\3\1\1\11\1\1\1\11"+
    "\2\1\1\11\3\1\1\0\1\1\1\0\2\1\2\11"+
    "\1\1\2\0\1\11\13\1\2\11\1\1\1\11\1\0"+
    "\2\11\1\0\10\1\11\11\1\1\2\11\2\0\7\1"+
    "\1\11\16\1\1\0\2\11\10\1\1\0\5\1\1\0"+
    "\1\1\2\11\12\1\1\0\14\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _ErlangLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ErlangLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(YYINITIAL); return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 84: break;
          case 2: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 85: break;
          case 3: 
            { return ERL_RADIX;
            } 
            // fall through
          case 86: break;
          case 4: 
            { return ERL_OP_EXL;
            } 
            // fall through
          case 87: break;
          case 5: 
            { return ERL_COMMENT;
            } 
            // fall through
          case 88: break;
          case 6: 
            { return ERL_VAR;
            } 
            // fall through
          case 89: break;
          case 7: 
            { return ERL_ATOM_NAME;
            } 
            // fall through
          case 90: break;
          case 8: 
            { return ERL_INTEGER;
            } 
            // fall through
          case 91: break;
          case 9: 
            { return ERL_OP_MINUS;
            } 
            // fall through
          case 92: break;
          case 10: 
            { return ERL_DOT;
            } 
            // fall through
          case 93: break;
          case 11: 
            { yybegin(IN_QUOTES); return ERL_SINGLE_QUOTE;
            } 
            // fall through
          case 94: break;
          case 12: 
            { return ERL_BRACKET_LEFT;
            } 
            // fall through
          case 95: break;
          case 13: 
            { return ERL_CURLY_LEFT;
            } 
            // fall through
          case 96: break;
          case 14: 
            { return ERL_BRACKET_RIGHT;
            } 
            // fall through
          case 97: break;
          case 15: 
            { return ERL_CURLY_RIGHT;
            } 
            // fall through
          case 98: break;
          case 16: 
            { return ERL_CHAR;
            } 
            // fall through
          case 99: break;
          case 17: 
            { return ERL_OP_EQ;
            } 
            // fall through
          case 100: break;
          case 18: 
            { return ERL_COMMA;
            } 
            // fall through
          case 101: break;
          case 19: 
            { return ERL_PAR_LEFT;
            } 
            // fall through
          case 102: break;
          case 20: 
            { return ERL_COLON;
            } 
            // fall through
          case 103: break;
          case 21: 
            { return ERL_OP_GT;
            } 
            // fall through
          case 104: break;
          case 22: 
            { return ERL_OP_LT;
            } 
            // fall through
          case 105: break;
          case 23: 
            { return ERL_OP_PLUS;
            } 
            // fall through
          case 106: break;
          case 24: 
            { return ERL_OP_AR_MUL;
            } 
            // fall through
          case 107: break;
          case 25: 
            { return ERL_OP_AR_DIV;
            } 
            // fall through
          case 108: break;
          case 26: 
            { return ERL_QMARK;
            } 
            // fall through
          case 109: break;
          case 27: 
            { return ERL_PAR_RIGHT;
            } 
            // fall through
          case 110: break;
          case 28: 
            { return ERL_OP_OR;
            } 
            // fall through
          case 111: break;
          case 29: 
            { return ERL_SEMI;
            } 
            // fall through
          case 112: break;
          case 30: 
            { yybegin(YYINITIAL); return ERL_SINGLE_QUOTE;
            } 
            // fall through
          case 113: break;
          case 31: 
            { return getTokenStart() == 0 ? ERL_SHEBANG : com.intellij.psi.TokenType.ERROR_ELEMENT;
            } 
            // fall through
          case 114: break;
          case 32: 
            { return ERL_FUNCTION_DOC_COMMENT;
            } 
            // fall through
          case 115: break;
          case 33: 
            { return ERL_OP_MINUS_MINUS;
            } 
            // fall through
          case 116: break;
          case 34: 
            { return ERL_ARROW;
            } 
            // fall through
          case 117: break;
          case 35: 
            { return ERL_DOT_DOT;
            } 
            // fall through
          case 118: break;
          case 36: 
            { return ERL_STRING;
            } 
            // fall through
          case 119: break;
          case 37: 
            { return ERL_OP_EQ_EQ;
            } 
            // fall through
          case 120: break;
          case 38: 
            { return ERL_ASSOC;
            } 
            // fall through
          case 121: break;
          case 39: 
            { return ERL_OP_EQ_LT;
            } 
            // fall through
          case 122: break;
          case 40: 
            { return ERL_IF;
            } 
            // fall through
          case 123: break;
          case 41: 
            { return ERL_OF;
            } 
            // fall through
          case 124: break;
          case 42: 
            { return ERL_OR;
            } 
            // fall through
          case 125: break;
          case 43: 
            { return ERL_MATCH;
            } 
            // fall through
          case 126: break;
          case 44: 
            { return ERL_COLON_COLON;
            } 
            // fall through
          case 127: break;
          case 45: 
            { return ERL_OP_GT_EQ;
            } 
            // fall through
          case 128: break;
          case 46: 
            { return ERL_BIN_END;
            } 
            // fall through
          case 129: break;
          case 47: 
            { return ERL_OP_LT_MINUS;
            } 
            // fall through
          case 130: break;
          case 48: 
            { return ERL_OP_LT_EQ;
            } 
            // fall through
          case 131: break;
          case 49: 
            { return ERL_BIN_START;
            } 
            // fall through
          case 132: break;
          case 50: 
            { return ERL_OP_PLUS_PLUS;
            } 
            // fall through
          case 133: break;
          case 51: 
            { return ERL_OP_DIV_EQ;
            } 
            // fall through
          case 134: break;
          case 52: 
            { return ERL_OP_MAYBE_EQ;
            } 
            // fall through
          case 135: break;
          case 53: 
            { return ERL_OR_OR;
            } 
            // fall through
          case 136: break;
          case 54: 
            { return ERL_MODULE_DOC_COMMENT;
            } 
            // fall through
          case 137: break;
          case 55: 
            { return ERL_FLOAT;
            } 
            // fall through
          case 138: break;
          case 56: 
            { return ERL_END;
            } 
            // fall through
          case 139: break;
          case 57: 
            { return ERL_DOT_DOT_DOT;
            } 
            // fall through
          case 140: break;
          case 58: 
            { return ERL_BSR;
            } 
            // fall through
          case 141: break;
          case 59: 
            { return ERL_BSL;
            } 
            // fall through
          case 142: break;
          case 60: 
            { return ERL_BOR;
            } 
            // fall through
          case 143: break;
          case 61: 
            { return ERL_DIV;
            } 
            // fall through
          case 144: break;
          case 62: 
            { return ERL_NOT;
            } 
            // fall through
          case 145: break;
          case 63: 
            { return ERL_REM;
            } 
            // fall through
          case 146: break;
          case 64: 
            { return ERL_TRY;
            } 
            // fall through
          case 147: break;
          case 65: 
            { return ERL_OP_EQ_COL_EQ;
            } 
            // fall through
          case 148: break;
          case 66: 
            { return ERL_OP_EQ_DIV_EQ;
            } 
            // fall through
          case 149: break;
          case 67: 
            { return ERL_AND;
            } 
            // fall through
          case 150: break;
          case 68: 
            { return ERL_XOR;
            } 
            // fall through
          case 151: break;
          case 69: 
            { return ERL_ELSE;
            } 
            // fall through
          case 152: break;
          case 70: 
            { return ERL_BNOT;
            } 
            // fall through
          case 153: break;
          case 71: 
            { return ERL_BAND;
            } 
            // fall through
          case 154: break;
          case 72: 
            { return ERL_BXOR;
            } 
            // fall through
          case 155: break;
          case 73: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return ERL_FUN2;
            } 
            // fall through
          case 156: break;
          case 74: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return ERL_FUN;
            } 
            // fall through
          case 157: break;
          case 75: 
            { return ERL_WHEN;
            } 
            // fall through
          case 158: break;
          case 76: 
            { return ERL_CASE;
            } 
            // fall through
          case 159: break;
          case 77: 
            { return ERL_BEGIN;
            } 
            // fall through
          case 160: break;
          case 78: 
            { return ERL_AFTER;
            } 
            // fall through
          case 161: break;
          case 79: 
            { return ERL_CATCH;
            } 
            // fall through
          case 162: break;
          case 80: 
            { return ERL_MAYBE;
            } 
            // fall through
          case 163: break;
          case 81: 
            { return ERL_ORELSE;
            } 
            // fall through
          case 164: break;
          case 82: 
            { return ERL_RECEIVE;
            } 
            // fall through
          case 165: break;
          case 83: 
            { return ERL_ANDALSO;
            } 
            // fall through
          case 166: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
